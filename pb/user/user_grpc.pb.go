// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: pb/user/user.proto

package userpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_Authenticate_FullMethodName                  = "/user.UserService/Authenticate"
	UserService_SendBulkPhotoNotification_FullMethodName     = "/user.UserService/SendBulkPhotoNotification"
	UserService_SendSinglePhotoNotification_FullMethodName   = "/user.UserService/SendSinglePhotoNotification"
	UserService_SendBulkNotification_FullMethodName          = "/user.UserService/SendBulkNotification"
	UserService_SendSingleFacecamNotification_FullMethodName = "/user.UserService/SendSingleFacecamNotification"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	SendBulkPhotoNotification(ctx context.Context, in *SendBulkPhotoNotificationRequest, opts ...grpc.CallOption) (*SendBulkPhotoNotificationResponse, error)
	SendSinglePhotoNotification(ctx context.Context, in *SendSinglePhotoNotificationRequest, opts ...grpc.CallOption) (*SendSinglePhotoNotificationResponse, error)
	SendBulkNotification(ctx context.Context, in *SendBulkNotificationRequest, opts ...grpc.CallOption) (*SendBulkNotificationResponse, error)
	SendSingleFacecamNotification(ctx context.Context, in *SendSingleFacecamNotificationRequest, opts ...grpc.CallOption) (*SendSingleFacecamNotificationResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, UserService_Authenticate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SendBulkPhotoNotification(ctx context.Context, in *SendBulkPhotoNotificationRequest, opts ...grpc.CallOption) (*SendBulkPhotoNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendBulkPhotoNotificationResponse)
	err := c.cc.Invoke(ctx, UserService_SendBulkPhotoNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SendSinglePhotoNotification(ctx context.Context, in *SendSinglePhotoNotificationRequest, opts ...grpc.CallOption) (*SendSinglePhotoNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSinglePhotoNotificationResponse)
	err := c.cc.Invoke(ctx, UserService_SendSinglePhotoNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SendBulkNotification(ctx context.Context, in *SendBulkNotificationRequest, opts ...grpc.CallOption) (*SendBulkNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendBulkNotificationResponse)
	err := c.cc.Invoke(ctx, UserService_SendBulkNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SendSingleFacecamNotification(ctx context.Context, in *SendSingleFacecamNotificationRequest, opts ...grpc.CallOption) (*SendSingleFacecamNotificationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSingleFacecamNotificationResponse)
	err := c.cc.Invoke(ctx, UserService_SendSingleFacecamNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	SendBulkPhotoNotification(context.Context, *SendBulkPhotoNotificationRequest) (*SendBulkPhotoNotificationResponse, error)
	SendSinglePhotoNotification(context.Context, *SendSinglePhotoNotificationRequest) (*SendSinglePhotoNotificationResponse, error)
	SendBulkNotification(context.Context, *SendBulkNotificationRequest) (*SendBulkNotificationResponse, error)
	SendSingleFacecamNotification(context.Context, *SendSingleFacecamNotificationRequest) (*SendSingleFacecamNotificationResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) Authenticate(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedUserServiceServer) SendBulkPhotoNotification(context.Context, *SendBulkPhotoNotificationRequest) (*SendBulkPhotoNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBulkPhotoNotification not implemented")
}
func (UnimplementedUserServiceServer) SendSinglePhotoNotification(context.Context, *SendSinglePhotoNotificationRequest) (*SendSinglePhotoNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSinglePhotoNotification not implemented")
}
func (UnimplementedUserServiceServer) SendBulkNotification(context.Context, *SendBulkNotificationRequest) (*SendBulkNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBulkNotification not implemented")
}
func (UnimplementedUserServiceServer) SendSingleFacecamNotification(context.Context, *SendSingleFacecamNotificationRequest) (*SendSingleFacecamNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSingleFacecamNotification not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SendBulkPhotoNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBulkPhotoNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SendBulkPhotoNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SendBulkPhotoNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SendBulkPhotoNotification(ctx, req.(*SendBulkPhotoNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SendSinglePhotoNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSinglePhotoNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SendSinglePhotoNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SendSinglePhotoNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SendSinglePhotoNotification(ctx, req.(*SendSinglePhotoNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SendBulkNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBulkNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SendBulkNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SendBulkNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SendBulkNotification(ctx, req.(*SendBulkNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SendSingleFacecamNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSingleFacecamNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SendSingleFacecamNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SendSingleFacecamNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SendSingleFacecamNotification(ctx, req.(*SendSingleFacecamNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _UserService_Authenticate_Handler,
		},
		{
			MethodName: "SendBulkPhotoNotification",
			Handler:    _UserService_SendBulkPhotoNotification_Handler,
		},
		{
			MethodName: "SendSinglePhotoNotification",
			Handler:    _UserService_SendSinglePhotoNotification_Handler,
		},
		{
			MethodName: "SendBulkNotification",
			Handler:    _UserService_SendBulkNotification_Handler,
		},
		{
			MethodName: "SendSingleFacecamNotification",
			Handler:    _UserService_SendSingleFacecamNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/user/user.proto",
}

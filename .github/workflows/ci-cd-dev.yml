name: CI/CD Development Pipeline

on:
  push:
    tags:
      - 'x.dev*'
  pull_request:
    branches:
      - develop

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          go install github.com/pressly/goose/v3/cmd/goose@latest

      - name: Run tests for photo-svc
        run: |
          cd photo-svc
          go mod download
          go test ./... -v

      - name: Run tests for user-svc
        run: |
          cd user-svc
          go mod download
          go test ./... -v

      - name: Run tests for transaction-svc
        run: |
          cd transaction-svc
          go mod download
          go test ./... -v

      - name: Run tests for upload-svc
        run: |
          cd upload-svc
          go mod download
          go test ./... -v

      - name: Run tests for notification-svc
        run: |
          cd notification-svc
          go mod download
          go test ./... -v

      - name: Run linter
        run: |
          golangci-lint run --timeout=5m

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        service: [photo-svc, user-svc, transaction-svc, upload-svc, notification-svc]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=dev,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to VPS with Docker Compose
        run: |
          # Create deployment directory
          mkdir -p deployment-dev
          
          # Copy deployment files
          cp docker-compose.yaml deployment-dev/
          cp docker-compose-development.yaml deployment-dev/
          cp -r scripts/ deployment-dev/
          cp -r init/ deployment-dev/
          
          # Create environment files
          cat > deployment-dev/.env.photo << 'EOF'
          PORT=8001
          DB_HOST=postgres
          DB_PORT=5432
          DB_USER=photo_user
          DB_PASSWORD=photo_password
          DB_NAME=photo_db
          REDIS_HOST=redis
          REDIS_PASSWORD=redis_password
          NATS_URL=nats://nats:4222
          CONSUL_HOST=consul:8500
          EOF
          
          cat > deployment-dev/.env.user << 'EOF'
          PORT=8003
          DB_HOST=postgres
          DB_PORT=5432
          DB_USER=user_user
          DB_PASSWORD=user_password
          DB_NAME=user_db
          REDIS_HOST=redis
          REDIS_PASSWORD=redis_password
          NATS_URL=nats://nats:4222
          CONSUL_HOST=consul:8500
          EOF
          
          cat > deployment-dev/.env.transaction << 'EOF'
          PORT=8005
          DB_HOST=postgres
          DB_PORT=5432
          DB_USER=transaction_user
          DB_PASSWORD=transaction_password
          DB_NAME=transaction_db
          REDIS_HOST=redis
          REDIS_PASSWORD=redis_password
          NATS_URL=nats://nats:4222
          CONSUL_HOST=consul:8500
          EOF
          
          cat > deployment-dev/.env.upload << 'EOF'
          PORT=8002
          DB_HOST=postgres
          DB_PORT=5432
          DB_USER=upload_user
          DB_PASSWORD=upload_password
          DB_NAME=upload_db
          MINIO_ENDPOINT=http://minio:9000
          MINIO_ACCESS_KEY=minio_access_key
          MINIO_SECRET_KEY=minio_secret_key
          NATS_URL=nats://nats:4222
          CONSUL_HOST=consul:8500
          EOF
          
          cat > deployment-dev/.env.notification << 'EOF'
          PORT=8004
          DB_HOST=postgres
          DB_PORT=5432
          DB_USER=notification_user
          DB_PASSWORD=notification_password
          DB_NAME=notification_db
          REDIS_HOST=redis
          REDIS_PASSWORD=redis_password
          NATS_URL=nats://nats:4222
          CONSUL_HOST=consul:8500
          EOF
          
          cat > deployment-dev/.env << 'EOF'
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=postgres_password
          REDIS_PASSWORD=redis_password
          MINIO_ROOT_USER=minio_access_key
          MINIO_ROOT_PASSWORD=minio_secret_key
          EOF
          
          # Create deployment script
          cat > deployment-dev/deploy-dev.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "🚀 Deploying Be Your Moments Development Environment"
          
          # Stop existing containers
          docker-compose down || true
          
          # Pull latest images
          docker-compose pull
          
          # Start services
          docker-compose up -d
          
          # Wait for services to be ready
          echo "⏳ Waiting for services to start..."
          sleep 30
          
          # Check service health
          echo "🏥 Checking service health..."
          docker-compose ps
          
          echo "✅ Development deployment completed!"
          EOF
          
          chmod +x deployment-dev/deploy-dev.sh
          
          # Deploy to VPS
          scp -o StrictHostKeyChecking=no -r deployment-dev/* ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/tmp/be-yourmoments-dev/
          
          # Execute deployment on VPS
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd /tmp/be-yourmoments-dev
            chmod +x deploy-dev.sh
            ./deploy-dev.sh
          EOF

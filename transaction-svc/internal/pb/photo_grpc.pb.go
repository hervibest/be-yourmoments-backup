// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: photo.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PhotoService_UpdatePhotographerPhoto_FullMethodName = "/photo.PhotoService/UpdatePhotographerPhoto"
	PhotoService_UpdateFaceRecogPhoto_FullMethodName    = "/photo.PhotoService/UpdateFaceRecogPhoto"
)

// PhotoServiceClient is the client API for PhotoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PhotoServiceClient interface {
	UpdatePhotographerPhoto(ctx context.Context, in *UpdatePhotographerPhotoRequest, opts ...grpc.CallOption) (*UpdatePhotographerPhotoResponse, error)
	UpdateFaceRecogPhoto(ctx context.Context, in *UpdateFaceRecogPhotoRequest, opts ...grpc.CallOption) (*UpdateFaceRecogPhotoResponse, error)
}

type photoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPhotoServiceClient(cc grpc.ClientConnInterface) PhotoServiceClient {
	return &photoServiceClient{cc}
}

func (c *photoServiceClient) UpdatePhotographerPhoto(ctx context.Context, in *UpdatePhotographerPhotoRequest, opts ...grpc.CallOption) (*UpdatePhotographerPhotoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePhotographerPhotoResponse)
	err := c.cc.Invoke(ctx, PhotoService_UpdatePhotographerPhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *photoServiceClient) UpdateFaceRecogPhoto(ctx context.Context, in *UpdateFaceRecogPhotoRequest, opts ...grpc.CallOption) (*UpdateFaceRecogPhotoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFaceRecogPhotoResponse)
	err := c.cc.Invoke(ctx, PhotoService_UpdateFaceRecogPhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PhotoServiceServer is the server API for PhotoService service.
// All implementations must embed UnimplementedPhotoServiceServer
// for forward compatibility.
type PhotoServiceServer interface {
	UpdatePhotographerPhoto(context.Context, *UpdatePhotographerPhotoRequest) (*UpdatePhotographerPhotoResponse, error)
	UpdateFaceRecogPhoto(context.Context, *UpdateFaceRecogPhotoRequest) (*UpdateFaceRecogPhotoResponse, error)
	mustEmbedUnimplementedPhotoServiceServer()
}

// UnimplementedPhotoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPhotoServiceServer struct{}

func (UnimplementedPhotoServiceServer) UpdatePhotographerPhoto(context.Context, *UpdatePhotographerPhotoRequest) (*UpdatePhotographerPhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhotographerPhoto not implemented")
}
func (UnimplementedPhotoServiceServer) UpdateFaceRecogPhoto(context.Context, *UpdateFaceRecogPhotoRequest) (*UpdateFaceRecogPhotoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFaceRecogPhoto not implemented")
}
func (UnimplementedPhotoServiceServer) mustEmbedUnimplementedPhotoServiceServer() {}
func (UnimplementedPhotoServiceServer) testEmbeddedByValue()                      {}

// UnsafePhotoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PhotoServiceServer will
// result in compilation errors.
type UnsafePhotoServiceServer interface {
	mustEmbedUnimplementedPhotoServiceServer()
}

func RegisterPhotoServiceServer(s grpc.ServiceRegistrar, srv PhotoServiceServer) {
	// If the following call pancis, it indicates UnimplementedPhotoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PhotoService_ServiceDesc, srv)
}

func _PhotoService_UpdatePhotographerPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhotographerPhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoServiceServer).UpdatePhotographerPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoService_UpdatePhotographerPhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoServiceServer).UpdatePhotographerPhoto(ctx, req.(*UpdatePhotographerPhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PhotoService_UpdateFaceRecogPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFaceRecogPhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PhotoServiceServer).UpdateFaceRecogPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PhotoService_UpdateFaceRecogPhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PhotoServiceServer).UpdateFaceRecogPhoto(ctx, req.(*UpdateFaceRecogPhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PhotoService_ServiceDesc is the grpc.ServiceDesc for PhotoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PhotoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "photo.PhotoService",
	HandlerType: (*PhotoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePhotographerPhoto",
			Handler:    _PhotoService_UpdatePhotographerPhoto_Handler,
		},
		{
			MethodName: "UpdateFaceRecogPhoto",
			Handler:    _PhotoService_UpdateFaceRecogPhoto_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "photo.proto",
}

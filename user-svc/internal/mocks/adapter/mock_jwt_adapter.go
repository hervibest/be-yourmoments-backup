// Code generated by MockGen. DO NOT EDIT.
// Source: ./adapter/jwt_adapter.go

// Package mockadapter is a generated GoMock package.
package mockadapter

import (
	entity "be-yourmoments/user-svc/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockJWTAdapter is a mock of JWTAdapter interface.
type MockJWTAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockJWTAdapterMockRecorder
}

// MockJWTAdapterMockRecorder is the mock recorder for MockJWTAdapter.
type MockJWTAdapterMockRecorder struct {
	mock *MockJWTAdapter
}

// NewMockJWTAdapter creates a new mock instance.
func NewMockJWTAdapter(ctrl *gomock.Controller) *MockJWTAdapter {
	mock := &MockJWTAdapter{ctrl: ctrl}
	mock.recorder = &MockJWTAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTAdapter) EXPECT() *MockJWTAdapterMockRecorder {
	return m.recorder
}

// GenerateAccessToken mocks base method.
func (m *MockJWTAdapter) GenerateAccessToken(userId string) (*entity.AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccessToken", userId)
	ret0, _ := ret[0].(*entity.AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccessToken indicates an expected call of GenerateAccessToken.
func (mr *MockJWTAdapterMockRecorder) GenerateAccessToken(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccessToken", reflect.TypeOf((*MockJWTAdapter)(nil).GenerateAccessToken), userId)
}

// GenerateRefreshToken mocks base method.
func (m *MockJWTAdapter) GenerateRefreshToken(userId string) (*entity.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRefreshToken", userId)
	ret0, _ := ret[0].(*entity.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRefreshToken indicates an expected call of GenerateRefreshToken.
func (mr *MockJWTAdapterMockRecorder) GenerateRefreshToken(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRefreshToken", reflect.TypeOf((*MockJWTAdapter)(nil).GenerateRefreshToken), userId)
}

// VerifyAccessToken mocks base method.
func (m *MockJWTAdapter) VerifyAccessToken(token string) (*entity.AccessToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAccessToken", token)
	ret0, _ := ret[0].(*entity.AccessToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyAccessToken indicates an expected call of VerifyAccessToken.
func (mr *MockJWTAdapterMockRecorder) VerifyAccessToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAccessToken", reflect.TypeOf((*MockJWTAdapter)(nil).VerifyAccessToken), token)
}

// VerifyRefreshToken mocks base method.
func (m *MockJWTAdapter) VerifyRefreshToken(token string) (*entity.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyRefreshToken", token)
	ret0, _ := ret[0].(*entity.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyRefreshToken indicates an expected call of VerifyRefreshToken.
func (mr *MockJWTAdapterMockRecorder) VerifyRefreshToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyRefreshToken", reflect.TypeOf((*MockJWTAdapter)(nil).VerifyRefreshToken), token)
}

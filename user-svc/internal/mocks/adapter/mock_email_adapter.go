// Code generated by MockGen. DO NOT EDIT.
// Source: ./adapter/email_adapter.go

// Package mockadapter is a generated GoMock package.
package mockadapter

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmailAdapter is a mock of EmailAdapter interface.
type MockEmailAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockEmailAdapterMockRecorder
}

// MockEmailAdapterMockRecorder is the mock recorder for MockEmailAdapter.
type MockEmailAdapterMockRecorder struct {
	mock *MockEmailAdapter
}

// NewMockEmailAdapter creates a new mock instance.
func NewMockEmailAdapter(ctrl *gomock.Controller) *MockEmailAdapter {
	mock := &MockEmailAdapter{ctrl: ctrl}
	mock.recorder = &MockEmailAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailAdapter) EXPECT() *MockEmailAdapterMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockEmailAdapter) SendEmail(email, token, category string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", email, token, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockEmailAdapterMockRecorder) SendEmail(email, token, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockEmailAdapter)(nil).SendEmail), email, token, category)
}

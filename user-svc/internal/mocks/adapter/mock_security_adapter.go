// Code generated by MockGen. DO NOT EDIT.
// Source: ./adapter/security_adapter.go

// Package mockadapter is a generated GoMock package.
package mockadapter

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSecurityAdapter is a mock of SecurityAdapter interface.
type MockSecurityAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityAdapterMockRecorder
}

// MockSecurityAdapterMockRecorder is the mock recorder for MockSecurityAdapter.
type MockSecurityAdapterMockRecorder struct {
	mock *MockSecurityAdapter
}

// NewMockSecurityAdapter creates a new mock instance.
func NewMockSecurityAdapter(ctrl *gomock.Controller) *MockSecurityAdapter {
	mock := &MockSecurityAdapter{ctrl: ctrl}
	mock.recorder = &MockSecurityAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityAdapter) EXPECT() *MockSecurityAdapterMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockSecurityAdapter) Decrypt(ciphertext string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", ciphertext)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockSecurityAdapterMockRecorder) Decrypt(ciphertext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockSecurityAdapter)(nil).Decrypt), ciphertext)
}

// Encrypt mocks base method.
func (m *MockSecurityAdapter) Encrypt(plaintext string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", plaintext)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockSecurityAdapterMockRecorder) Encrypt(plaintext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockSecurityAdapter)(nil).Encrypt), plaintext)
}

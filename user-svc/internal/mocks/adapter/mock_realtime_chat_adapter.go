// Code generated by MockGen. DO NOT EDIT.
// Source: ./adapter/realtime_chat_adapter.go
//
// Generated by this command:
//
//	mockgen -source=./adapter/realtime_chat_adapter.go -destination=./mocks/adapter/realtime_chat_adapter.go -package=mockadapter
//

// Package mockadapter is a generated GoMock package.
package mockadapter

import (
	context "context"
	reflect "reflect"

	firestore "cloud.google.com/go/firestore"
	entity "github.com/hervibest/be-yourmoments-backup/user-svc/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockRealtimeChatAdapter is a mock of RealtimeChatAdapter interface.
type MockRealtimeChatAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockRealtimeChatAdapterMockRecorder
	isgomock struct{}
}

// MockRealtimeChatAdapterMockRecorder is the mock recorder for MockRealtimeChatAdapter.
type MockRealtimeChatAdapterMockRecorder struct {
	mock *MockRealtimeChatAdapter
}

// NewMockRealtimeChatAdapter creates a new mock instance.
func NewMockRealtimeChatAdapter(ctrl *gomock.Controller) *MockRealtimeChatAdapter {
	mock := &MockRealtimeChatAdapter{ctrl: ctrl}
	mock.recorder = &MockRealtimeChatAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRealtimeChatAdapter) EXPECT() *MockRealtimeChatAdapterMockRecorder {
	return m.recorder
}

// CreateChatRoom mocks base method.
func (m *MockRealtimeChatAdapter) CreateChatRoom(ctx context.Context, user *entity.User, userProfile *entity.UserProfile) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateChatRoom", ctx, user, userProfile)
}

// CreateChatRoom indicates an expected call of CreateChatRoom.
func (mr *MockRealtimeChatAdapterMockRecorder) CreateChatRoom(ctx, user, userProfile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatRoom", reflect.TypeOf((*MockRealtimeChatAdapter)(nil).CreateChatRoom), ctx, user, userProfile)
}

// CreateRoom mocks base method.
func (m *MockRealtimeChatAdapter) CreateRoom(ctx context.Context, roomUserId string, participants []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", ctx, roomUserId, participants)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockRealtimeChatAdapterMockRecorder) CreateRoom(ctx, roomUserId, participants any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockRealtimeChatAdapter)(nil).CreateRoom), ctx, roomUserId, participants)
}

// GetRoom mocks base method.
func (m *MockRealtimeChatAdapter) GetRoom(ctx context.Context, roomUserId string) ([]*firestore.DocumentSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoom", ctx, roomUserId)
	ret0, _ := ret[0].([]*firestore.DocumentSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoom indicates an expected call of GetRoom.
func (mr *MockRealtimeChatAdapterMockRecorder) GetRoom(ctx, roomUserId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoom", reflect.TypeOf((*MockRealtimeChatAdapter)(nil).GetRoom), ctx, roomUserId)
}

// SendMessage mocks base method.
func (m *MockRealtimeChatAdapter) SendMessage(ctx context.Context, roomId, senderId, safeMessage string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, roomId, senderId, safeMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockRealtimeChatAdapterMockRecorder) SendMessage(ctx, roomId, senderId, safeMessage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockRealtimeChatAdapter)(nil).SendMessage), ctx, roomId, senderId, safeMessage)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./gateway/producer/user_producer.go
//
// Generated by this command:
//
//	mockgen -source=./gateway/producer/user_producer.go -destination=./mocks/gateway/producer/user_producer.go -package=mockproducer
//

// Package mockproducer is a generated GoMock package.
package mockproducer

import (
	context "context"
	reflect "reflect"

	event "github.com/hervibest/be-yourmoments-backup/user-svc/internal/model/event"
	gomock "go.uber.org/mock/gomock"
)

// MockUserProducer is a mock of UserProducer interface.
type MockUserProducer struct {
	ctrl     *gomock.Controller
	recorder *MockUserProducerMockRecorder
	isgomock struct{}
}

// MockUserProducerMockRecorder is the mock recorder for MockUserProducer.
type MockUserProducerMockRecorder struct {
	mock *MockUserProducer
}

// NewMockUserProducer creates a new mock instance.
func NewMockUserProducer(ctrl *gomock.Controller) *MockUserProducer {
	mock := &MockUserProducer{ctrl: ctrl}
	mock.recorder = &MockUserProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserProducer) EXPECT() *MockUserProducerMockRecorder {
	return m.recorder
}

// ProduceUserCreated mocks base method.
func (m *MockUserProducer) ProduceUserCreated(ctx context.Context, userEvent *event.UserEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceUserCreated", ctx, userEvent)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceUserCreated indicates an expected call of ProduceUserCreated.
func (mr *MockUserProducerMockRecorder) ProduceUserCreated(ctx, userEvent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceUserCreated", reflect.TypeOf((*MockUserProducer)(nil).ProduceUserCreated), ctx, userEvent)
}

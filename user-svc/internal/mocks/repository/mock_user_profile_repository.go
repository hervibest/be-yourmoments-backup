// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/user_profile_repository.go
//
// Generated by this command:
//
//	mockgen -source=./repository/user_profile_repository.go -destination=./mocks/repository/mock_user_profile_repository.go -package=mockrepository
//

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	reflect "reflect"

	entity "github.com/hervibest/be-yourmoments-backup/user-svc/internal/entity"
	enum "github.com/hervibest/be-yourmoments-backup/user-svc/internal/enum"
	repository "github.com/hervibest/be-yourmoments-backup/user-svc/internal/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockUserProfileRepository is a mock of UserProfileRepository interface.
type MockUserProfileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserProfileRepositoryMockRecorder
	isgomock struct{}
}

// MockUserProfileRepositoryMockRecorder is the mock recorder for MockUserProfileRepository.
type MockUserProfileRepositoryMockRecorder struct {
	mock *MockUserProfileRepository
}

// NewMockUserProfileRepository creates a new mock instance.
func NewMockUserProfileRepository(ctrl *gomock.Controller) *MockUserProfileRepository {
	mock := &MockUserProfileRepository{ctrl: ctrl}
	mock.recorder = &MockUserProfileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserProfileRepository) EXPECT() *MockUserProfileRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockUserProfileRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockUserProfileRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockUserProfileRepository)(nil).Close))
}

// Create mocks base method.
func (m *MockUserProfileRepository) Create(ctx context.Context, tx repository.Querier, userProfile *entity.UserProfile) (*entity.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tx, userProfile)
	ret0, _ := ret[0].(*entity.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserProfileRepositoryMockRecorder) Create(ctx, tx, userProfile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserProfileRepository)(nil).Create), ctx, tx, userProfile)
}

// CreateWithProfileUrl mocks base method.
func (m *MockUserProfileRepository) CreateWithProfileUrl(ctx context.Context, tx repository.Querier, userProfile *entity.UserProfile) (*entity.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithProfileUrl", ctx, tx, userProfile)
	ret0, _ := ret[0].(*entity.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithProfileUrl indicates an expected call of CreateWithProfileUrl.
func (mr *MockUserProfileRepositoryMockRecorder) CreateWithProfileUrl(ctx, tx, userProfile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithProfileUrl", reflect.TypeOf((*MockUserProfileRepository)(nil).CreateWithProfileUrl), ctx, tx, userProfile)
}

// FindByUserId mocks base method.
func (m *MockUserProfileRepository) FindByUserId(ctx context.Context, userId string) (*entity.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", ctx, userId)
	ret0, _ := ret[0].(*entity.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockUserProfileRepositoryMockRecorder) FindByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockUserProfileRepository)(nil).FindByUserId), ctx, userId)
}

// Update mocks base method.
func (m *MockUserProfileRepository) Update(ctx context.Context, tx repository.Querier, userProfile *entity.UserProfile) (*entity.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, tx, userProfile)
	ret0, _ := ret[0].(*entity.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserProfileRepositoryMockRecorder) Update(ctx, tx, userProfile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserProfileRepository)(nil).Update), ctx, tx, userProfile)
}

// UpdateSimilarity mocks base method.
func (m *MockUserProfileRepository) UpdateSimilarity(ctx context.Context, tx repository.Querier, similarity enum.SimilarityLevelEnum, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSimilarity", ctx, tx, similarity, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSimilarity indicates an expected call of UpdateSimilarity.
func (mr *MockUserProfileRepositoryMockRecorder) UpdateSimilarity(ctx, tx, similarity, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSimilarity", reflect.TypeOf((*MockUserProfileRepository)(nil).UpdateSimilarity), ctx, tx, similarity, userID)
}

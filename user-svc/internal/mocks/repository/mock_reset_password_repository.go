// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/reset_password_repository.go

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	entity "be-yourmoments/user-svc/internal/entity"
	repository "be-yourmoments/user-svc/internal/repository"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockResetPasswordRepository is a mock of ResetPasswordRepository interface.
type MockResetPasswordRepository struct {
	ctrl     *gomock.Controller
	recorder *MockResetPasswordRepositoryMockRecorder
}

// MockResetPasswordRepositoryMockRecorder is the mock recorder for MockResetPasswordRepository.
type MockResetPasswordRepositoryMockRecorder struct {
	mock *MockResetPasswordRepository
}

// NewMockResetPasswordRepository creates a new mock instance.
func NewMockResetPasswordRepository(ctrl *gomock.Controller) *MockResetPasswordRepository {
	mock := &MockResetPasswordRepository{ctrl: ctrl}
	mock.recorder = &MockResetPasswordRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResetPasswordRepository) EXPECT() *MockResetPasswordRepositoryMockRecorder {
	return m.recorder
}

// CountByEmail mocks base method.
func (m *MockResetPasswordRepository) CountByEmail(ctx context.Context, email string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByEmail", ctx, email)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByEmail indicates an expected call of CountByEmail.
func (mr *MockResetPasswordRepositoryMockRecorder) CountByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByEmail", reflect.TypeOf((*MockResetPasswordRepository)(nil).CountByEmail), ctx, email)
}

// Delete mocks base method.
func (m *MockResetPasswordRepository) Delete(ctx context.Context, tx repository.Querier, resetPassword *entity.ResetPassword) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, tx, resetPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockResetPasswordRepositoryMockRecorder) Delete(ctx, tx, resetPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockResetPasswordRepository)(nil).Delete), ctx, tx, resetPassword)
}

// FindByEmail mocks base method.
func (m *MockResetPasswordRepository) FindByEmail(ctx context.Context, email string) (*entity.ResetPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.ResetPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockResetPasswordRepositoryMockRecorder) FindByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockResetPasswordRepository)(nil).FindByEmail), ctx, email)
}

// FindByEmailAndToken mocks base method.
func (m *MockResetPasswordRepository) FindByEmailAndToken(ctx context.Context, email, token string) (*entity.ResetPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmailAndToken", ctx, email, token)
	ret0, _ := ret[0].(*entity.ResetPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmailAndToken indicates an expected call of FindByEmailAndToken.
func (mr *MockResetPasswordRepositoryMockRecorder) FindByEmailAndToken(ctx, email, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmailAndToken", reflect.TypeOf((*MockResetPasswordRepository)(nil).FindByEmailAndToken), ctx, email, token)
}

// Insert mocks base method.
func (m *MockResetPasswordRepository) Insert(ctx context.Context, tx repository.Querier, resetPassword *entity.ResetPassword) (*entity.ResetPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, tx, resetPassword)
	ret0, _ := ret[0].(*entity.ResetPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockResetPasswordRepositoryMockRecorder) Insert(ctx, tx, resetPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockResetPasswordRepository)(nil).Insert), ctx, tx, resetPassword)
}

// Update mocks base method.
func (m *MockResetPasswordRepository) Update(ctx context.Context, tx repository.Querier, resetPassword *entity.ResetPassword) (*entity.ResetPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, tx, resetPassword)
	ret0, _ := ret[0].(*entity.ResetPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockResetPasswordRepositoryMockRecorder) Update(ctx, tx, resetPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockResetPasswordRepository)(nil).Update), ctx, tx, resetPassword)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/email_verification_repository.go

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	entity "be-yourmoments/user-svc/internal/entity"
	repository "be-yourmoments/user-svc/internal/repository"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEmailVerificationRepository is a mock of EmailVerificationRepository interface.
type MockEmailVerificationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEmailVerificationRepositoryMockRecorder
}

// MockEmailVerificationRepositoryMockRecorder is the mock recorder for MockEmailVerificationRepository.
type MockEmailVerificationRepositoryMockRecorder struct {
	mock *MockEmailVerificationRepository
}

// NewMockEmailVerificationRepository creates a new mock instance.
func NewMockEmailVerificationRepository(ctrl *gomock.Controller) *MockEmailVerificationRepository {
	mock := &MockEmailVerificationRepository{ctrl: ctrl}
	mock.recorder = &MockEmailVerificationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmailVerificationRepository) EXPECT() *MockEmailVerificationRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockEmailVerificationRepository) Delete(ctx context.Context, tx repository.Querier, emailVerification *entity.EmailVerification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, tx, emailVerification)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEmailVerificationRepositoryMockRecorder) Delete(ctx, tx, emailVerification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEmailVerificationRepository)(nil).Delete), ctx, tx, emailVerification)
}

// FindByEmail mocks base method.
func (m *MockEmailVerificationRepository) FindByEmail(ctx context.Context, email string) (*entity.EmailVerification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.EmailVerification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockEmailVerificationRepositoryMockRecorder) FindByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockEmailVerificationRepository)(nil).FindByEmail), ctx, email)
}

// FindByEmailAndToken mocks base method.
func (m *MockEmailVerificationRepository) FindByEmailAndToken(ctx context.Context, email, token string) (*entity.EmailVerification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmailAndToken", ctx, email, token)
	ret0, _ := ret[0].(*entity.EmailVerification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmailAndToken indicates an expected call of FindByEmailAndToken.
func (mr *MockEmailVerificationRepositoryMockRecorder) FindByEmailAndToken(ctx, email, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmailAndToken", reflect.TypeOf((*MockEmailVerificationRepository)(nil).FindByEmailAndToken), ctx, email, token)
}

// Insert mocks base method.
func (m *MockEmailVerificationRepository) Insert(ctx context.Context, tx repository.Querier, emailVerification *entity.EmailVerification) (*entity.EmailVerification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, tx, emailVerification)
	ret0, _ := ret[0].(*entity.EmailVerification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockEmailVerificationRepositoryMockRecorder) Insert(ctx, tx, emailVerification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockEmailVerificationRepository)(nil).Insert), ctx, tx, emailVerification)
}

// Update mocks base method.
func (m *MockEmailVerificationRepository) Update(ctx context.Context, tx repository.Querier, emailVerification *entity.EmailVerification) (*entity.EmailVerification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, tx, emailVerification)
	ret0, _ := ret[0].(*entity.EmailVerification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockEmailVerificationRepositoryMockRecorder) Update(ctx, tx, emailVerification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEmailVerificationRepository)(nil).Update), ctx, tx, emailVerification)
}

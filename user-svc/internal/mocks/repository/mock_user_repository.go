// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/user_repository.go

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	entity "be-yourmoments/user-svc/internal/entity"
	repository "be-yourmoments/user-svc/internal/repository"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockUserRepository) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockUserRepositoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockUserRepository)(nil).Close))
}

// CountByEmail mocks base method.
func (m *MockUserRepository) CountByEmail(ctx context.Context, email string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByEmail", ctx, email)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByEmail indicates an expected call of CountByEmail.
func (mr *MockUserRepositoryMockRecorder) CountByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByEmail", reflect.TypeOf((*MockUserRepository)(nil).CountByEmail), ctx, email)
}

// CountByEmailGoogleId mocks base method.
func (m *MockUserRepository) CountByEmailGoogleId(ctx context.Context, email, googleId string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByEmailGoogleId", ctx, email, googleId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByEmailGoogleId indicates an expected call of CountByEmailGoogleId.
func (mr *MockUserRepositoryMockRecorder) CountByEmailGoogleId(ctx, email, googleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByEmailGoogleId", reflect.TypeOf((*MockUserRepository)(nil).CountByEmailGoogleId), ctx, email, googleId)
}

// CountByEmailNotGoogle mocks base method.
func (m *MockUserRepository) CountByEmailNotGoogle(ctx context.Context, email string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByEmailNotGoogle", ctx, email)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByEmailNotGoogle indicates an expected call of CountByEmailNotGoogle.
func (mr *MockUserRepositoryMockRecorder) CountByEmailNotGoogle(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByEmailNotGoogle", reflect.TypeOf((*MockUserRepository)(nil).CountByEmailNotGoogle), ctx, email)
}

// CountByPhoneNumber mocks base method.
func (m *MockUserRepository) CountByPhoneNumber(ctx context.Context, email string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByPhoneNumber", ctx, email)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByPhoneNumber indicates an expected call of CountByPhoneNumber.
func (mr *MockUserRepositoryMockRecorder) CountByPhoneNumber(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByPhoneNumber", reflect.TypeOf((*MockUserRepository)(nil).CountByPhoneNumber), ctx, email)
}

// CountByUsername mocks base method.
func (m *MockUserRepository) CountByUsername(ctx context.Context, email string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByUsername", ctx, email)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByUsername indicates an expected call of CountByUsername.
func (mr *MockUserRepositoryMockRecorder) CountByUsername(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByUsername", reflect.TypeOf((*MockUserRepository)(nil).CountByUsername), ctx, email)
}

// CreateByEmail mocks base method.
func (m *MockUserRepository) CreateByEmail(ctx context.Context, tx repository.Querier, user *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateByEmail", ctx, tx, user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateByEmail indicates an expected call of CreateByEmail.
func (mr *MockUserRepositoryMockRecorder) CreateByEmail(ctx, tx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateByEmail", reflect.TypeOf((*MockUserRepository)(nil).CreateByEmail), ctx, tx, user)
}

// CreateByGoogleSignIn mocks base method.
func (m *MockUserRepository) CreateByGoogleSignIn(ctx context.Context, tx repository.Querier, user *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateByGoogleSignIn", ctx, tx, user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateByGoogleSignIn indicates an expected call of CreateByGoogleSignIn.
func (mr *MockUserRepositoryMockRecorder) CreateByGoogleSignIn(ctx, tx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateByGoogleSignIn", reflect.TypeOf((*MockUserRepository)(nil).CreateByGoogleSignIn), ctx, tx, user)
}

// CreateByPhoneNumber mocks base method.
func (m *MockUserRepository) CreateByPhoneNumber(ctx context.Context, tx repository.Querier, user *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateByPhoneNumber", ctx, tx, user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateByPhoneNumber indicates an expected call of CreateByPhoneNumber.
func (mr *MockUserRepositoryMockRecorder) CreateByPhoneNumber(ctx, tx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateByPhoneNumber", reflect.TypeOf((*MockUserRepository)(nil).CreateByPhoneNumber), ctx, tx, user)
}

// FindByEmail mocks base method.
func (m *MockUserRepository) FindByEmail(ctx context.Context, email string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserRepositoryMockRecorder) FindByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserRepository)(nil).FindByEmail), ctx, email)
}

// FindById mocks base method.
func (m *MockUserRepository) FindById(ctx context.Context, userId string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, userId)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUserRepositoryMockRecorder) FindById(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserRepository)(nil).FindById), ctx, userId)
}

// FindByMultipleParam mocks base method.
func (m *MockUserRepository) FindByMultipleParam(ctx context.Context, multipleParam string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMultipleParam", ctx, multipleParam)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMultipleParam indicates an expected call of FindByMultipleParam.
func (mr *MockUserRepositoryMockRecorder) FindByMultipleParam(ctx, multipleParam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMultipleParam", reflect.TypeOf((*MockUserRepository)(nil).FindByMultipleParam), ctx, multipleParam)
}

// UpdateEmailVerifiedAt mocks base method.
func (m *MockUserRepository) UpdateEmailVerifiedAt(ctx context.Context, tx repository.Querier, user *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmailVerifiedAt", ctx, tx, user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmailVerifiedAt indicates an expected call of UpdateEmailVerifiedAt.
func (mr *MockUserRepositoryMockRecorder) UpdateEmailVerifiedAt(ctx, tx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmailVerifiedAt", reflect.TypeOf((*MockUserRepository)(nil).UpdateEmailVerifiedAt), ctx, tx, user)
}

// UpdatePassword mocks base method.
func (m *MockUserRepository) UpdatePassword(ctx context.Context, tx repository.Querier, user *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, tx, user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUserRepositoryMockRecorder) UpdatePassword(ctx, tx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserRepository)(nil).UpdatePassword), ctx, tx, user)
}

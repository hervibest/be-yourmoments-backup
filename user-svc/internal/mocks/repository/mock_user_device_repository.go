// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository/user_device_repository.go
//
// Generated by this command:
//
//	mockgen -source=./repository/user_device_repository.go -destination=./mocks/repository/mock_user_device_repository.go -package=mockrepository
//

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	context "context"
	reflect "reflect"

	entity "github.com/hervibest/be-yourmoments-backup/user-svc/internal/entity"
	repository "github.com/hervibest/be-yourmoments-backup/user-svc/internal/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockUserDeviceRepository is a mock of UserDeviceRepository interface.
type MockUserDeviceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserDeviceRepositoryMockRecorder
	isgomock struct{}
}

// MockUserDeviceRepositoryMockRecorder is the mock recorder for MockUserDeviceRepository.
type MockUserDeviceRepositoryMockRecorder struct {
	mock *MockUserDeviceRepository
}

// NewMockUserDeviceRepository creates a new mock instance.
func NewMockUserDeviceRepository(ctrl *gomock.Controller) *MockUserDeviceRepository {
	mock := &MockUserDeviceRepository{ctrl: ctrl}
	mock.recorder = &MockUserDeviceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDeviceRepository) EXPECT() *MockUserDeviceRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserDeviceRepository) Create(ctx context.Context, tx repository.Querier, userDevice *entity.UserDevice) (*entity.UserDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tx, userDevice)
	ret0, _ := ret[0].(*entity.UserDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserDeviceRepositoryMockRecorder) Create(ctx, tx, userDevice any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserDeviceRepository)(nil).Create), ctx, tx, userDevice)
}

// DeleteByUserID mocks base method.
func (m *MockUserDeviceRepository) DeleteByUserID(ctx context.Context, tx repository.Querier, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUserID", ctx, tx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserID indicates an expected call of DeleteByUserID.
func (mr *MockUserDeviceRepositoryMockRecorder) DeleteByUserID(ctx, tx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserID", reflect.TypeOf((*MockUserDeviceRepository)(nil).DeleteByUserID), ctx, tx, userID)
}

// DeleteByUserIdAndToken mocks base method.
func (m *MockUserDeviceRepository) DeleteByUserIdAndToken(ctx context.Context, tx repository.Querier, userID, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUserIdAndToken", ctx, tx, userID, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserIdAndToken indicates an expected call of DeleteByUserIdAndToken.
func (mr *MockUserDeviceRepositoryMockRecorder) DeleteByUserIdAndToken(ctx, tx, userID, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserIdAndToken", reflect.TypeOf((*MockUserDeviceRepository)(nil).DeleteByUserIdAndToken), ctx, tx, userID, token)
}

// FetchFCMTokensFromPostgre mocks base method.
func (m *MockUserDeviceRepository) FetchFCMTokensFromPostgre(ctx context.Context, tx repository.Querier, userIDs []string) (*[]*entity.UserDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFCMTokensFromPostgre", ctx, tx, userIDs)
	ret0, _ := ret[0].(*[]*entity.UserDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFCMTokensFromPostgre indicates an expected call of FetchFCMTokensFromPostgre.
func (mr *MockUserDeviceRepositoryMockRecorder) FetchFCMTokensFromPostgre(ctx, tx, userIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFCMTokensFromPostgre", reflect.TypeOf((*MockUserDeviceRepository)(nil).FetchFCMTokensFromPostgre), ctx, tx, userIDs)
}

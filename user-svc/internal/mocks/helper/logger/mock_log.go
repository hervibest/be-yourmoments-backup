// Code generated by MockGen. DO NOT EDIT.
// Source: ./helper/logger/logger.go
//
// Generated by this command:
//
//	mockgen -source=./helper/logger/logger.go -destination=./mocks/helper/logger/mock_log.go -package=mocklogger
//

// Package mocklogger is a generated GoMock package.
package mocklogger

import (
	reflect "reflect"

	logger "github.com/hervibest/be-yourmoments-backup/user-svc/internal/helper/logger"
	gomock "go.uber.org/mock/gomock"
)

// MockLog is a mock of Log interface.
type MockLog struct {
	ctrl     *gomock.Controller
	recorder *MockLogMockRecorder
	isgomock struct{}
}

// MockLogMockRecorder is the mock recorder for MockLog.
type MockLogMockRecorder struct {
	mock *MockLog
}

// NewMockLog creates a new mock instance.
func NewMockLog(ctrl *gomock.Controller) *MockLog {
	mock := &MockLog{ctrl: ctrl}
	mock.recorder = &MockLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLog) EXPECT() *MockLogMockRecorder {
	return m.recorder
}

// CustomDebug mocks base method.
func (m *MockLog) CustomDebug(title string, message any, options ...*logger.Options) {
	m.ctrl.T.Helper()
	varargs := []any{title, message}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "CustomDebug", varargs...)
}

// CustomDebug indicates an expected call of CustomDebug.
func (mr *MockLogMockRecorder) CustomDebug(title, message any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{title, message}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomDebug", reflect.TypeOf((*MockLog)(nil).CustomDebug), varargs...)
}

// CustomError mocks base method.
func (m *MockLog) CustomError(title string, message any, options ...*logger.Options) {
	m.ctrl.T.Helper()
	varargs := []any{title, message}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "CustomError", varargs...)
}

// CustomError indicates an expected call of CustomError.
func (mr *MockLogMockRecorder) CustomError(title, message any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{title, message}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomError", reflect.TypeOf((*MockLog)(nil).CustomError), varargs...)
}

// CustomLog mocks base method.
func (m *MockLog) CustomLog(title string, message any, options ...*logger.Options) {
	m.ctrl.T.Helper()
	varargs := []any{title, message}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "CustomLog", varargs...)
}

// CustomLog indicates an expected call of CustomLog.
func (mr *MockLogMockRecorder) CustomLog(title, message any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{title, message}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomLog", reflect.TypeOf((*MockLog)(nil).CustomLog), varargs...)
}

// CustomPanic mocks base method.
func (m *MockLog) CustomPanic(title string, message any, options ...logger.Options) {
	m.ctrl.T.Helper()
	varargs := []any{title, message}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "CustomPanic", varargs...)
}

// CustomPanic indicates an expected call of CustomPanic.
func (mr *MockLogMockRecorder) CustomPanic(title, message any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{title, message}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CustomPanic", reflect.TypeOf((*MockLog)(nil).CustomPanic), varargs...)
}

// Debug mocks base method.
func (m *MockLog) Debug(message any, options ...*logger.Options) {
	m.ctrl.T.Helper()
	varargs := []any{message}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLogMockRecorder) Debug(message any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{message}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLog)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockLog) Error(message any, options ...*logger.Options) {
	m.ctrl.T.Helper()
	varargs := []any{message}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLogMockRecorder) Error(message any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{message}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLog)(nil).Error), varargs...)
}

// Log mocks base method.
func (m *MockLog) Log(message any, options ...*logger.Options) {
	m.ctrl.T.Helper()
	varargs := []any{message}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Log", varargs...)
}

// Log indicates an expected call of Log.
func (mr *MockLogMockRecorder) Log(message any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{message}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockLog)(nil).Log), varargs...)
}

// Panic mocks base method.
func (m *MockLog) Panic(message any, options ...logger.Options) {
	m.ctrl.T.Helper()
	varargs := []any{message}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panic", varargs...)
}

// Panic indicates an expected call of Panic.
func (mr *MockLogMockRecorder) Panic(message any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{message}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panic", reflect.TypeOf((*MockLog)(nil).Panic), varargs...)
}

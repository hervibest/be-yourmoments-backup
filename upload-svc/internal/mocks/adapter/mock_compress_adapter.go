// Code generated by MockGen. DO NOT EDIT.
// Source: ./adapter/compress_adapter.go

// Package mockadapter is a generated GoMock package.
package mockadapter

import (
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCompressAdapter is a mock of CompressAdapter interface.
type MockCompressAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockCompressAdapterMockRecorder
}

// MockCompressAdapterMockRecorder is the mock recorder for MockCompressAdapter.
type MockCompressAdapterMockRecorder struct {
	mock *MockCompressAdapter
}

// NewMockCompressAdapter creates a new mock instance.
func NewMockCompressAdapter(ctrl *gomock.Controller) *MockCompressAdapter {
	mock := &MockCompressAdapter{ctrl: ctrl}
	mock.recorder = &MockCompressAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompressAdapter) EXPECT() *MockCompressAdapterMockRecorder {
	return m.recorder
}

// CompressImage mocks base method.
func (m *MockCompressAdapter) CompressImage(originalFile *multipart.FileHeader, uploadFile multipart.File, dirname string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompressImage", originalFile, uploadFile, dirname)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CompressImage indicates an expected call of CompressImage.
func (mr *MockCompressAdapterMockRecorder) CompressImage(originalFile, uploadFile, dirname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompressImage", reflect.TypeOf((*MockCompressAdapter)(nil).CompressImage), originalFile, uploadFile, dirname)
}

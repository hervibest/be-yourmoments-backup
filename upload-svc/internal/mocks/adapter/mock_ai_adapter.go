// Code generated by MockGen. DO NOT EDIT.
// Source: ./adapter/ai_adapter.go

// Package mockadapter is a generated GoMock package.
package mockadapter

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/hervibest/be-yourmoments-backup/upload-svc/internal/entity"
)

// MockAiAdapter is a mock of AiAdapter interface.
type MockAiAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAiAdapterMockRecorder
}

// MockAiAdapterMockRecorder is the mock recorder for MockAiAdapter.
type MockAiAdapterMockRecorder struct {
	mock *MockAiAdapter
}

// NewMockAiAdapter creates a new mock instance.
func NewMockAiAdapter(ctrl *gomock.Controller) *MockAiAdapter {
	mock := &MockAiAdapter{ctrl: ctrl}
	mock.recorder = &MockAiAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAiAdapter) EXPECT() *MockAiAdapterMockRecorder {
	return m.recorder
}

// ProcessBulkPhoto mocks base method.
func (m *MockAiAdapter) ProcessBulkPhoto(ctx context.Context, bulkPhoto *entity.BulkPhoto, photos *[]*entity.Photo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessBulkPhoto", ctx, bulkPhoto, photos)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessBulkPhoto indicates an expected call of ProcessBulkPhoto.
func (mr *MockAiAdapterMockRecorder) ProcessBulkPhoto(ctx, bulkPhoto, photos interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessBulkPhoto", reflect.TypeOf((*MockAiAdapter)(nil).ProcessBulkPhoto), ctx, bulkPhoto, photos)
}

// ProcessFacecam mocks base method.
func (m *MockAiAdapter) ProcessFacecam(ctx context.Context, userId, fileUrl string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessFacecam", ctx, userId, fileUrl)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessFacecam indicates an expected call of ProcessFacecam.
func (mr *MockAiAdapterMockRecorder) ProcessFacecam(ctx, userId, fileUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessFacecam", reflect.TypeOf((*MockAiAdapter)(nil).ProcessFacecam), ctx, userId, fileUrl)
}

// ProcessPhoto mocks base method.
func (m *MockAiAdapter) ProcessPhoto(ctx context.Context, fileId, fileUrl string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPhoto", ctx, fileId, fileUrl)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessPhoto indicates an expected call of ProcessPhoto.
func (mr *MockAiAdapterMockRecorder) ProcessPhoto(ctx, fileId, fileUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPhoto", reflect.TypeOf((*MockAiAdapter)(nil).ProcessPhoto), ctx, fileId, fileUrl)
}

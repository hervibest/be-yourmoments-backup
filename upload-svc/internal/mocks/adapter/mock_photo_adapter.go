// Code generated by MockGen. DO NOT EDIT.
// Source: ./adapter/photo_adapter.go

// Package mockadapter is a generated GoMock package.
package mockadapter

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/hervibest/be-yourmoments-backup/upload-svc/internal/entity"
)

// MockPhotoAdapter is a mock of PhotoAdapter interface.
type MockPhotoAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockPhotoAdapterMockRecorder
}

// MockPhotoAdapterMockRecorder is the mock recorder for MockPhotoAdapter.
type MockPhotoAdapterMockRecorder struct {
	mock *MockPhotoAdapter
}

// NewMockPhotoAdapter creates a new mock instance.
func NewMockPhotoAdapter(ctrl *gomock.Controller) *MockPhotoAdapter {
	mock := &MockPhotoAdapter{ctrl: ctrl}
	mock.recorder = &MockPhotoAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhotoAdapter) EXPECT() *MockPhotoAdapterMockRecorder {
	return m.recorder
}

// CreateFacecam mocks base method.
func (m *MockPhotoAdapter) CreateFacecam(ctx context.Context, facecam *entity.Facecam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFacecam", ctx, facecam)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFacecam indicates an expected call of CreateFacecam.
func (mr *MockPhotoAdapterMockRecorder) CreateFacecam(ctx, facecam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFacecam", reflect.TypeOf((*MockPhotoAdapter)(nil).CreateFacecam), ctx, facecam)
}

// CreatePhoto mocks base method.
func (m *MockPhotoAdapter) CreatePhoto(ctx context.Context, photo *entity.Photo, facecam *entity.PhotoDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePhoto", ctx, photo, facecam)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePhoto indicates an expected call of CreatePhoto.
func (mr *MockPhotoAdapterMockRecorder) CreatePhoto(ctx, photo, facecam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePhoto", reflect.TypeOf((*MockPhotoAdapter)(nil).CreatePhoto), ctx, photo, facecam)
}

// CreatePhotos mocks base method.
func (m *MockPhotoAdapter) CreatePhotos(ctx context.Context, bulkPhoto *entity.BulkPhoto, photos *[]*entity.Photo, photoDetails *[]*entity.PhotoDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePhotos", ctx, bulkPhoto, photos, photoDetails)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePhotos indicates an expected call of CreatePhotos.
func (mr *MockPhotoAdapterMockRecorder) CreatePhotos(ctx, bulkPhoto, photos, photoDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePhotos", reflect.TypeOf((*MockPhotoAdapter)(nil).CreatePhotos), ctx, bulkPhoto, photos, photoDetails)
}

// UpdatePhotoDetail mocks base method.
func (m *MockPhotoAdapter) UpdatePhotoDetail(ctx context.Context, facecam *entity.PhotoDetail) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhotoDetail", ctx, facecam)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePhotoDetail indicates an expected call of UpdatePhotoDetail.
func (mr *MockPhotoAdapterMockRecorder) UpdatePhotoDetail(ctx, facecam interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhotoDetail", reflect.TypeOf((*MockPhotoAdapter)(nil).UpdatePhotoDetail), ctx, facecam)
}
